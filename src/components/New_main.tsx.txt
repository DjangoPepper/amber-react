import React, { useState, useCallback } from 'react';
// ... (importations restantes)

function Main() {
	const dispatch = useDispatch();
	const loaded = useSelector<RootState, boolean>(state => state.data.loaded);
	const [selectedRows, setSelectedRows] = useState<string[]>([]); // État local pour stocker les lignes sélectionnées

	const handleRowSelection = (rowIndex: number) => {
		const newSelectedRows = [...selectedRows];
		const rowIdentifier = `${rowIndex + 1}`; // L'identifiant de la ligne (à ajuster selon votre logique)
		
		// Si la ligne est déjà sélectionnée, la retirer, sinon l'ajouter
		if (newSelectedRows.includes(rowIdentifier)) {
			newSelectedRows.splice(newSelectedRows.indexOf(rowIdentifier), 1);
		} else {
			newSelectedRows.push(rowIdentifier);
		}
		
		setSelectedRows(newSelectedRows);
	};

	const onDrop = useCallback((acceptedFiles: any) => {
		const file = acceptedFiles[0];
		const reader = new FileReader();

		reader.onload = function (evt) {
			const rawData = evt.target?.result;
			if (!rawData) return;

			const workbook = read(rawData, { type: 'binary' });
			const sheetData = utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]);

			// Utilisation des lignes sélectionnées pour traiter uniquement les données utiles
			const cleanedData = sheetData
				.filter((_, rowIndex) => selectedRows.includes(`${rowIndex + 1}`)) // Ici, vous pouvez ajuster comment les lignes sont identifiées
				.map(cleanData);

			dispatch(DataAction.importData(cleanedData));
			dispatch(DataAction.changeOriginalpos('stock'));
		};

		reader.readAsBinaryString(file);
	}, [selectedRows]);

	return (
		<Container className="p-2">
			{loaded ? (
				<Row>
					<Col>
						<DataTable />
					</Col>
					<Col>
						<Statistics />
					</Col>
				</Row>
			) : (
				<Row>
					<Col>
						<Dropzone onDrop={onDrop}>
							{({ getRootProps, getInputProps, isDragActive }) => (
								<section className="dropzone">
									<div {...getRootProps()}>
										<input {...getInputProps()} />
										{isDragActive ? <p> </p> : <p> Excel </p>}
									</div>
								</section>
							)}
						</Dropzone>
						{/* Affichage de la liste des lignes et sélection */}
						<ul>
							{sheetData.map((_, rowIndex) => (
								<li key={rowIndex}>
									Ligne {rowIndex + 1}{' '}
									<button onClick={() => handleRowSelection(rowIndex)}>
										{selectedRows.includes(`${rowIndex + 1}`) ? 'Deselect' : 'Select'}
									</button>
								</li>
							))}
						</ul>
					</Col>
				</Row>
			)}
		</Container>
	);
}

export default Main;
